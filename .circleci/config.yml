# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.3.9-apache-node-browsers
      # - image: circleci/mysql:5.7.28
      #   environment:
      #     MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      #     MYSQL_DATABASE: $MYSQL_DATABASE
      #     MYSQL_USER: $MYSQL_USER
      #     MYSQL_PASSWORD: $MYSQL_PASSWORD
          

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo apt-get install -y libfreetype6-dev libjpeg62-turbo-dev libpng-dev libpq-dev
      - run: sudo docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
      - run: sudo docker-php-ext-install zip
      - run: sudo docker-php-ext-install exif
      - run: sudo docker-php-ext-install pdo_mysql
      - run: sudo docker-php-ext-install pdo_pgsql
      - run: sudo docker-php-ext-install mbstring
      - run: sudo docker-php-ext-install gd
      # - run:
      # Our primary container isn't MYSQL so run a sleep command until it's ready.
      #     name: Waiting for MySQL to be ready
      #     command: |
      #       for i in `seq 1 10`;
      #       do
      #         nc -z 127.0.0.1 3306 && echo Success && exit 0
      #         echo -n .
      #         sleep 1
      #       done
      #       echo Failed waiting for MySQL && exit 1
      # - run:
      #     name: Install MySQL CLI
      #     command: |
      #       sudo apt-get install default-mysql-client

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      - run: sudo chmod +x bin/cake
      
  deploy:
    machine:
      enabled: true
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "ca:a6:fb:48:63:20:c4:90:dc:98:b2:bd:13:a6:a9:c5"
      - run:
          name: fix host authenticity for production server
          command: ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
      - run:
          name: deploy app
          command: scp purple-cms/* $SSH_USER@$SSH_HOST:$SSH_DEPLOY_PATH -p $SSH_PORT

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master